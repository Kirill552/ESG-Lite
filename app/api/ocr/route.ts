import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { processS3File } from '@/lib/ocr';
import { prisma } from '@/lib/prisma';

export const runtime = 'nodejs';

export async function POST(request: NextRequest) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { documentId } = body;

    if (!documentId) {
      return NextResponse.json(
        { error: 'documentId is required' },
        { status: 400 }
      );
    }

    console.log('üîç OCR POST request received:', { documentId, userId });

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
    const document = await prisma.document.findFirst({
      where: {
        id: documentId,
        user: { clerkId: userId }
      },
      include: {
        user: true
      }
    });
    
    if (!document) {
      return NextResponse.json({
        success: false,
        error: 'Document not found'
      }, { status: 404 });
    }

    console.log('üîç –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è OCR:', { documentId, fileName: document.fileName });

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞
      await prisma.document.update({
        where: { id: documentId },
        data: { 
          status: 'PROCESSING',
          ocrProcessed: false
        }
      });

      // filePath —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç fileKey
      const fileKey = document.filePath;
      console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º OCR –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ñ–∞–π–ª–∞:', fileKey);
       
      const text = await processS3File(fileKey);
      
      console.log('‚úÖ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞:', text.length);
      console.log('üìÑ –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', text.substring(0, 100));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
      await prisma.document.update({
        where: { id: documentId },
        data: {
          status: 'PROCESSED',
          ocrProcessed: true,
          ocrData: {
            fullText: text,
            textPreview: text.substring(0, 200),
            textLength: text.length,
            processedAt: new Date().toISOString()
          },
          ocrConfidence: 0.95 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        }
      });
      
      console.log('üíæ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');

      return NextResponse.json({
        success: true,
        data: {
          documentId,
          preview: text.substring(0, 200),
          textLength: text.length,
          processedAt: new Date().toISOString()
        }
      });

    } catch (ocrError: any) {
      console.error('‚ùå OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞:', ocrError.message);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
      await prisma.document.update({
        where: { id: documentId },
        data: {
          status: 'FAILED',
          ocrData: {
            error: ocrError.message,
            processedAt: new Date().toISOString()
          }
        }
      });

      return NextResponse.json({
        success: false,
        error: ocrError.message
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('‚ùå OCR API error:', error);
    return NextResponse.json({
      success: false,
      error: 'Internal Server Error'
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const { userId } = await auth();
    if (!userId) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);
    const documentId = searchParams.get('documentId');

    if (!documentId) {
      return NextResponse.json(
        { error: 'documentId is required' },
        { status: 400 }
      );
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
    const document = await prisma.document.findFirst({
      where: {
        id: documentId,
        user: { clerkId: userId }
      }
    });
    
    if (!document) {
      return NextResponse.json(
        { error: 'Document not found' },
        { status: 404 }
      );
    }

    console.log('üîç OCR GET request for documentId:', documentId);
    console.log('üìÑ Document OCR status:', document.ocrProcessed);

    if (!document.ocrProcessed || !document.ocrData) {
      return NextResponse.json({
        success: true,
        data: {
          documentId,
          status: 'not_started',
        }
      });
    }

    const ocrData = document.ocrData as any;
    
    return NextResponse.json({
      success: true,
      data: {
        documentId,
        status: document.status === 'PROCESSED' ? 'completed' : 'failed',
        textPreview: ocrData.textPreview,
        textLength: ocrData.textLength,
        error: ocrData.error,
        processedAt: ocrData.processedAt
      }
    });

  } catch (error: any) {
    console.error('‚ùå API Error in OCR GET route:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  }
} 