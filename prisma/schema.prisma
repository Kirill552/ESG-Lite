// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователь
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  orgId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents Document[]
  reports   Report[]
  credits   Credit[]
  invoices  Invoice[]

  @@index([clerkId])
  @@index([orgId])
}

// Документы для OCR
model Document {
  id             String   @id @default(cuid())
  userId         String
  orgId          String
  type           String   // invoice, scan, pdf
  fileName       String
  fileKey        String   // S3 key
  status         String   @default("pending") // pending, processing, completed, failed
  extractedText  String?  @db.Text
  confidence     Float?
  error          String?
  processedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orgId])
  @@index([status])
}

// Отчеты
model Report {
  id          String   @id @default(cuid())
  userId      String
  orgId       String
  type        String   // 296fz, cbam
  fileKey     String   // S3 key
  status      String   @default("pending") // pending, processing, completed, failed
  metadata    Json?
  error       String?
  generatedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orgId])
  @@index([type])
  @@index([status])
}

// Кредиты для биллинга
model Credit {
  id            String   @id @default(cuid())
  userId        String
  orgId         String
  amount        Int      // Количество кредитов (в тоннах CO2)
  type          String   // purchase, bonus, deduction, refund
  description   String
  referenceId   String?  // ID связанной транзакции/отчета
  referenceType String?  // report, invoice, etc
  balance       Int      // Баланс после операции
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orgId])
  @@index([type])
  @@index([createdAt])
}

// Счета/инвойсы
model Invoice {
  id          String   @id @default(cuid())
  userId      String
  orgId       String
  amount      Float    // Сумма в рублях
  credits     Int      // Количество кредитов
  status      String   @default("pending") // pending, paid, cancelled, refunded
  paymentId   String?  // ID платежа в платежной системе
  paymentUrl  String?  // URL для оплаты
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orgId])
  @@index([status])
}

// Настройки организации
model Organization {
  id              String   @id @default(cuid())
  clerkOrgId      String   @unique
  name            String
  creditBalance   Int      @default(0)
  monthlyLimit    Int?     // Месячный лимит в тоннах CO2
  surgeMultiplier Float    @default(1.0) // Множитель цены в пиковый период
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([clerkOrgId])
}

// Carbon Score метрики
model CarbonScore {
  id               String   @id @default(cuid())
  orgId            String
  month            Int
  year             Int
  totalEmissions   Float    // Тонны CO2
  scope1Emissions  Float
  scope2Emissions  Float
  scope3Emissions  Float
  reductionPercent Float?   // Процент снижения относительно прошлого периода
  metadata         Json?
  createdAt        DateTime @default(now())

  @@unique([orgId, month, year])
  @@index([orgId])
  @@index([year, month])
}